"use strict";(self.webpackChunkgo_feature_flag_website=self.webpackChunkgo_feature_flag_website||[]).push([[11477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/09/12/the-power-of-rollbacks","metadata":{"permalink":"/blog/2023/09/12/the-power-of-rollbacks","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-09-12-the-power-of-rollbacks/index.md","source":"@site/blog/2023-09-12-the-power-of-rollbacks/index.md","title":"The Power of Rollbacks","description":"\ud83d\udea8 Bug alert! No worries, feature flags have your back. Learn how to respond swiftly to issues without breaking a sweat","date":"2023-09-12T00:00:00.000Z","formattedDate":"September 12, 2023","tags":[{"label":"rollback","permalink":"/blog/tags/rollback"}],"readingTime":4.095,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"The Power of Rollbacks","description":"\ud83d\udea8 Bug alert! No worries, feature flags have your back. Learn how to respond swiftly to issues without breaking a sweat","authors":["thomaspoignant"],"tags":["rollback"]},"unlisted":false,"nextItem":{"title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","permalink":"/blog/2023/07/24/nodejs-tutorial"}},"content":"As software engineers, the process of releasing new features and updates can be both exhilarating and nerve-wracking.  \\nYou\'ve put in countless hours of hard work, and the moment has arrived to introduce your latest creation to the world. \\n\\n**But what happens when things don\'t go as planned? What if a new feature causes unforeseen issues or negatively impacts your users?**\\n\\nThis is where feature flags come to the rescue, offering a safety net that allows you to roll back features immediately without waiting for a deployment. In this blog post, we\'ll explore why feature flags are an essential tool for securing your software releases.\\n\\n\x3c!-- truncate --\x3e\\n\\n## The old way of doing rollbacks\\n\\nIf you are not using feature flags, your release process probably look like this:\\n![classic-RELEASE-process.svg](classic-RELEASE-process.svg)\\n\\n1. You code your new feature.\\n2. Your CI/CD is in charge to put your code in production.\\n3. Your new feature is available to all your users.\\n\\n**BUT what happen if your releases needs to be rollback?**\\n\\n![classic-ROLLBACK-process.svg](classic-ROLLBACK-process.svg)\\n\\nYou will most likely use the same process and go with something like\\n1. Revert your code and push the code.\\n2. Your CI/CD is in charge to put your code in production.\\n3. Your rollback is effective.\\n\\nDon\'t get me wrong this works, and you are probably doing it for years, but here are some problems your may occur while doing it:\\n- You have to identify what was changed and rollback the code to rollback the code associated to your feature.\\n- If you are unlucky, your main branch has changed since your last deployment, so coming back to the previous state may require to rollback more than your feature, and it can impact other teams.\\n- Depending on your deployment pipeline it can take minutes to hours to push your rollback in production.\\n\\n## Secure your release using feature flags\\n### How feature flags can help here?\\nThe main things we try to achieve here is to unlink deploy and release.\\nChanging your release process with feature flags is important if you want to secure your way to release new feature in your application.\\n\\nTo achieve this we will follow these steps:\\n\\n1. Create a dedicated feature flag for this feature. This flag should be independent of other flags and only control the state of this new feature.\\n2. In your application\'s codebase, implement checks that will monitor the state of the flag. This can usually be done with the usage of a `boolean` flag. If the flag is set to \\"**`false`**\\" the code should disable the feature\'s functionality.\\n3. When deploying the feature to production, ensure that the flag is initially set to `false` position for 100% of your users.\\n4. When you are ready to release the new feature, set the feature to `true` position for a part of your users.\\n5. Monitor the feature\'s performance closely during its initial release.\\n![ff-release-process.svg](ff-release-process.svg)\\n\\n### BUT what happen if your releases needs to be rollback?\\n\\nNow that we have a flag for our new feature it makes our life way easier to rollback this new feature, because as you guess we only have to put back the flag to 0% of our users and the feature will not be available anymore. \\n\\n![ff-rollback-process.svg](ff-rollback-process.svg)\\n\\n### How to do this with GO Feature Flag?\\n\\n1. Create a new flag\\n  ```yaml\\n  my-new-feature:\\n    variations:\\n      enabled: true\\n      disabled: false\\n    defaultRule:\\n      percentage:\\n        enabled: 0\\n        disabled: 100\\n  ```\\n  _As you can see the flag `my-new-feature` will be off for all your users._\\n\\n2. Wrap your new feature with the check of the flag\\n  ```go\\n      evalCtx := of.NewEvaluationContext(\\"d45e303a-38c2-11ed-a261-0242ac120002\\")\\n      if client.BooleanValue(ctx, \\"my-new-feature\\", false, evalCtx){\\n        // code of my new feature ...\\n      }\\n  ```\\n  _This example use the OpenFeature GO SDK syntax, but you can do it in any language._ \\n  \\n3. Deploy your code in production.\\n4. When you are ready to release, edit your flag configuration file to add traffic.\\n  ```yaml\\n  my-new-feature:\\n    variations:\\n      enabled: true\\n      disabled: false\\n    defaultRule:\\n      percentage:\\n        enabled: 100\\n        disabled: 0\\n  ```\\n5. \ud83d\udea8 If you find a bug and you want to rollback, just edit the flag configuration file again and your feature will be rollback.\\n  ```yaml\\n  my-new-feature:\\n    variations:\\n      enabled: true\\n      disabled: false\\n    defaultRule:\\n      percentage:\\n        enabled: 0\\n        disabled: 100\\n  ```\\n6. Your feature will be rollback immediately and the good part is that you don\'t even have deployed anything.\\n\\n## Conclusion\\n\\nIn the dynamic world of software engineering, ensuring the security of your releases is paramount.  \\nFeature flags offer a powerful mechanism for immediate rollbacks, reducing the risk associated with introducing new features. \\n\\nBy embracing feature flags, you can respond swiftly to issues, minimize downtime, and make informed decisions based on real-time data.  \\nThe result is a more robust and user-friendly software release process that enhances both the development team\'s confidence and the end-users\' experience. \\n\\nSo, don\'t wait\u2014start incorporating feature flags into your development workflow today and unlock the potential for secure and successful releases."},{"id":"/2023/07/24/nodejs-tutorial","metadata":{"permalink":"/blog/2023/07/24/nodejs-tutorial","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-07-24-nodejs-tutorial/index.md","source":"@site/blog/2023-07-24-nodejs-tutorial/index.md","title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","description":"In this video, we\'ll walk you through the process of implementing feature flags in your Node js applications, allowing you to roll out new features gradually and control their visibility in real-time.","date":"2023-07-24T00:00:00.000Z","formattedDate":"July 24, 2023","tags":[{"label":"openfeature","permalink":"/blog/tags/openfeature"},{"label":"nodeJS","permalink":"/blog/tags/node-js"}],"readingTime":2.85,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","description":"In this video, we\'ll walk you through the process of implementing feature flags in your Node js applications, allowing you to roll out new features gradually and control their visibility in real-time.","authors":["thomaspoignant"],"tags":["openfeature","nodeJS"],"image":"http://gofeatureflag.org/assets/images/banner-819d71b94352213afa22d2b53f376cab.png"},"unlisted":false,"prevItem":{"title":"The Power of Rollbacks","permalink":"/blog/2023/09/12/the-power-of-rollbacks"},"nextItem":{"title":"Enhancing Flag Configuration with Flag Metadata","permalink":"/blog/2023/06/09/flag-metadata"}},"content":"<iframe width=\\"100%\\" height=\\"444\\" src=\\"https://www.youtube.com/embed/ascFFZqjQAI\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nWelcome to this tutorial on using feature flags in Node js with GO Feature Flag and Open Feature SDKs.\\n\\nIn this video, we\'ll walk you through the process of implementing feature flags in your Node js applications, allowing you to roll out new features gradually and control their visibility in real-time.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Setup GO Feature Flag\\nBefore we proceed with the implementation, it\'s essential to set up GO Feature Flag to efficiently evaluate our flags.\\nTo achieve this, we will create a new file called `goff-proxy.yaml` that will contain the configuration on how to retrieve our feature flags\' configuration file.\\n\\nIn this file, we will first configure where to retrieve the flags and also a polling interval _(here 5000 milliseconds)_.  \\nIt means that GO Feature Flag will read the file every 5 seconds to check if your configuration has changed.\\n\\n```yaml\\nretriever:\\n  kind: github  # type of retriever we are using\\n  repositorySlug: thomaspoignant/demo-goff  # repository we are retrieving\\n  path: flags.yaml  # location of the file in the repository\\npollingInterval: 5000  # Time in milliseconds we wait before trying to check for changes\\n```\\n\\n## Create our first flag\\nTo create our flag we start by using the [GO Feature Flag editor](https://editor.gofeatureflag.org), for our test we will create a flag\\nnamed `my-new-feature` and it will use a type `boolean`.\\n\\n![editor.png](editor.png)\\n\\nWhen it is ready you can  copy/paste the flag definition and commit it in GitHub.\\n\\n## Start GO Feature Flag\\nWe will now start GO Feature Flag, for this we gonna use the docker image.\\n\\n```shell\\ndocker run -p 1031:1031 -e RETRIEVER_TOKEN=$GITHUB_TOKEN -v $(pwd):/goff thomaspoignant/go-feature-flag\\n```\\n\\nWith this command we launch GO Feature Flag on the port 1031 and with the configuration file we just created, you can also see that we provide a GitHub Token, this is to avoid being rate limited by the Github API.\\n\\n![terminal.png](terminal.png)\\n\\nGO Feature Flag is now started, and we can see that our flag is loaded.\\n\\n## Create Node.JS application using OpenFeature\\nNow let\'s start to create our Node JS application.\\n\\n```typescript\\nimport { GoFeatureFlagProvider } from \\"@openfeature/go-feature-flag-provider\\"\\nimport { EvaluationContext, OpenFeature } from \\"@openfeature/js-sdk\\"\\n\\nasync function main(){\\n  // We start by creating an instance of the Go Feature Flag Provider\\n  // We are just setting the endpoint to connect to our instance of GO Feature Flag\\n  const provider = new GoFeatureFlagProvider({\\n     endpoint: \'http://localhost:1031\'\\n  })\\n\\n  // We associate the provider to the SDK\\n  // It means that now when we call OpenFeature it will rely on GO Feature Flag as a backend.\\n  OpenFeature.setProvider(provider)\\n  \\n  // We need to ask for a client to evaluate the flags.\\n  const client = OpenFeature.getClient()\\n\\n  // We create a context for our evaluation.\\n  const ctx: EvaluationContext = {\\n     targetingKey: \'aae1cb41-c3cb-4753-a117-031ddc958f82\'\\n  }\\n\\n  // We evaluate the flag.\\n  const myNewFeature = await client.getBooleanValue(\\"my-new-feature\\", false, ctx)\\n\\n  if (myNewFeature) {\\n    // the new feature is available\\n  } else {\\n    // apply the old feature\\n  }\\n}\\n\\nmain()\\n```\\n\\nYou are now ready to use GO Feature Flag in your application.\\n\\n## Conclusion\\n\\nIn this tutorial we\'ve seen how simple it is to use GO Feature Flag in your Node.JS application using the OpenFeature SDK.\\n\\nI encourage you to read our documentation to see all the amazing possibility that you will have.\\n\\nAnd please provide us [feedbacks](mailto:contact@gofeatureflag.org) on how we can make your experience even better."},{"id":"/2023/06/09/flag-metadata","metadata":{"permalink":"/blog/2023/06/09/flag-metadata","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-06-09-flag-metadata/index.mdx","source":"@site/blog/2023-06-09-flag-metadata/index.mdx","title":"Enhancing Flag Configuration with Flag Metadata","description":"Empowering developers to attach additional information directly to flag configurations for enhanced management and code efficiency.","date":"2023-06-09T00:00:00.000Z","formattedDate":"June 9, 2023","tags":[{"label":"feature flag","permalink":"/blog/tags/feature-flag"},{"label":"relay-proxy","permalink":"/blog/tags/relay-proxy"},{"label":"metadata","permalink":"/blog/tags/metadata"}],"readingTime":2.325,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"Enhancing Flag Configuration with Flag Metadata","description":"Empowering developers to attach additional information directly to flag configurations for enhanced management and code efficiency.","authors":["thomaspoignant"],"tags":["feature flag","relay-proxy","metadata"],"image":"http://gofeatureflag.org/assets/images/3819075-0f37048ae26af73edc44747cd03d9eb7.png"},"unlisted":false,"prevItem":{"title":"Add Feature Flags in your Node.JS application using GO Feature Flag and Open Feature SDK","permalink":"/blog/2023/07/24/nodejs-tutorial"},"nextItem":{"title":"Limiting Access to the relay proxy with API Keys","permalink":"/blog/2023/04/12/relay_proxy_api_keys"}},"content":"![metadata](3819075.png)\\n\\nIn the ever-evolving world of software development, feature flag solutions have become instrumental in enabling continuous integration and deployment.\\nThese solutions allow developers to toggle features on and off without deploying new code, providing flexibility and control over feature releases.\\n\\nBut sometimes you need to give context about your flag, is it linked to an issue? Do you need a precise description? ...\\nTo respond to this, **GO Feature Flag** has recently introduced an exciting new feature: **the ability to add metadata to each flag configuration**.\\n\\nWith the version `v1.11.0` of GO Feature Flag, developers can now add valuable metadata to their flag configurations.\\nThis metadata serves as additional information linked directly to each flag, allowing for a more comprehensive understanding of its purpose and context.\\nThis metadata can include essential details such as issue tracker links, descriptions, or any other information that developers deem relevant.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Improved Code Efficiency\\nThe inclusion of metadata in flag configurations brings substantial benefits in terms of code efficiency and reusability.\\nBy using the `VariationDetails` functions, developers can easily retrieve the associated metadata when working with the flag.\\n\\nThis eliminates the need for additional queries or requests to obtain essential information related to a specific flag.\\nDevelopers can conveniently leverage this information within their code, leading to streamlined development processes and improved overall efficiency.\\n\\n## How to add the metadata?\\nWe have introduced a new field in the configuration of your flag\\n\\n```yaml\\nexample_flag:\\n  variations:\\n    A: true\\n    B: false\\n  defaultRule:\\n    variation: B\\n  metadata:\\n    description: this is a super simple example feature flag\\n    issue-link: https://jira.xxx/GOFF-01\\n```\\n\\nNow that you have this field available you can read the metadata in your `VariationDetails` when the evaluation is done.\\n\\nGO Feature Flag relay-proxy also enable seamless access to the added metadata.\\n\\n## Open Feature SDK Compatibility\\nTo further enhance the usability and compatibility of GO Feature Flag, the new metadata feature aligns with the **v0.6.0** version of the Open Feature specification.\\nThis update ensures that the metadata can be retrieved seamlessly using the Open Feature SDKs.\\n\\nAs soon as the SDKs will compatible with the metadata we will support it in the different GO Feature Flag providers.\\n\\n## Conclusion\\nThe introduction of metadata support in GO Feature Flag marks a significant milestone in feature flag solutions.\\nEnabling developers to attach relevant information directly to their flag configurations opens up new possibilities for\\nenhanced flag management and streamlined development processes.\\nWith the ability to retrieve metadata, developers can access essential information with ease.\\n\\nThe compatibility with the Open Feature SDK further solidifies the integration capabilities and ensures seamless utilization of metadata throughout the development cycle.\\nEmbrace the power of metadata and unlock a new level of control and efficiency in your feature flag management with GO Feature Flag\'s latest update."},{"id":"/2023/04/12/relay_proxy_api_keys","metadata":{"permalink":"/blog/2023/04/12/relay_proxy_api_keys","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-04-12-relay_proxy_api_keys/index.mdx","source":"@site/blog/2023-04-12-relay_proxy_api_keys/index.mdx","title":"Limiting Access to the relay proxy with API Keys","description":"New API Key feature in GO Feature Flag Relay Proxy 1.7.0 allows you to restrict access to the relay proxy to only known clients.","date":"2023-04-12T00:00:00.000Z","formattedDate":"April 12, 2023","tags":[{"label":"feature flag","permalink":"/blog/tags/feature-flag"},{"label":"relay-proxy","permalink":"/blog/tags/relay-proxy"}],"readingTime":2.54,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"Limiting Access to the relay proxy with API Keys","description":"New API Key feature in GO Feature Flag Relay Proxy 1.7.0 allows you to restrict access to the relay proxy to only known clients.","authors":["thomaspoignant"],"tags":["feature flag","relay-proxy"],"image":"http://gofeatureflag.org/assets/images/20945235-ede9f141540af91fe5fa5fdc4f3d7fe6.png"},"unlisted":false,"prevItem":{"title":"Enhancing Flag Configuration with Flag Metadata","permalink":"/blog/2023/06/09/flag-metadata"},"nextItem":{"title":"Feature Flag best practice","permalink":"/blog/feature-flag-best-practice"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n![security](20945235.png)\\n\\nGO Feature Flag Relay Proxy is a powerful tool that enables you to evaluate your feature flags without deploying code changes.\\nIt allows you to test and roll out new features to your users gradually, and to monitor the performance of your code in real-time.\\n\\nWith the recent release of version `v1.7.0`, GO Feature Flag Relay Proxy introduces a new feature that enhances the\\nsecurity of your feature flag evaluations.\\nThis new feature allows you to control who can access your relay proxy by configuring API Keys.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Limiting Access with API Keys\\n\\nWith the release of GO Feature Flag Relay Proxy version `v1.7.0`, you can now limit access to the relay proxy by configuring API Keys.\\nThis feature allows you to restrict access to only known clients, adding an additional layer of security to your feature flag evaluations.\\n\\nTo enable this feature, you need to add a list of API Keys to your configuration.\\nOnly requests with these API Keys will be accepted. This means that any requests without a valid API Key will be rejected.\\n\\nIn your **relay proxy** configuration file it will look like this:\\n```yaml\\n# ...\\n# List of authorized API keys.\\n# Each request will need to provide one of authorized key inside Authorization header with format Bearer <api-key>.\\n# There will be no authorization when this config is not configured.\\napiKeys:\\n  - 6147795c-4438-44f1-8ab2-18cb3fa9591f # apiKey for client 1\\n  - 3e3fb534-c8fd-42e9-8f2e-c80276b1685c # apiKey for client 2\\n  - 6603f9f8-2871-4149-81e8-8a362a8ae266 # apiKey for client 3\\n  - 0fc30ffe-b9bc-4398-a9f1-6f8b8486e8ce # apiKey for client 4\\n  - 500d222e-2654-41a4-bd31-e24a629cb78a # apiKey for client 5\\n\\n# ...\\n```\\n\\n## Using Client API Keys with Openfeature Providers\\n\\nIf you are using Open Feature and our providers, we have updated them to handle the `apiKey` for you.\\nYou can now specify your `apiKey` directly when you are initializing your provider. This will authenticate every request\\nto the relay proxy with this apiKey.\\n\\nTo use this feature, you need to specify the client API Key in your Open Feature provider initialization.\\nThis can be done by adding the `apiKey` like this:\\n\\n<Tabs groupId=\\"code\\">\\n      <TabItem value=\\"go\\" label=\\"GO\\">\\n\\n```go\\nprovider, err := gofeatureflag.NewProvider(gofeatureflag.ProviderOptions{\\n  //...\\n  APIKey:   \\"6147795c-4438-44f1-8ab2-18cb3fa9591f\\",\\n})\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"dotnet\\" label=\\".NET\\">\\n\\n```dotnet\\nGoFeatureFlagProviderOptions options = new GoFeatureFlagProviderOptions{\\n    // ...\\n    ApiKey = \\"6147795c-4438-44f1-8ab2-18cb3fa9591f\\"\\n  }\\n\\nGoFeatureFlagProvider authenticatedProvider = new GoFeatureFlagProvider(options);\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"java\\" label=\\"JAVA\\">\\n\\n```java\\nGoFeatureFlagProviderOptions options =\\n      GoFeatureFlagProviderOptions.builder()\\n      .apiKey(\\"6147795c-4438-44f1-8ab2-18cb3fa9591f\\")\\n      .endpoint(relayProxyAuthenticatedEndpoint)\\n      .build();\\n\\nGoFeatureFlagProvider provider = new GoFeatureFlagProvider(options);\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"javascript\\" label=\\"JS / TS\\">\\n\\n```javascript\\nconst goFeatureFlagProvider = new GoFeatureFlagProvider({\\n  // ...\\n  apiKey: \'6147795c-4438-44f1-8ab2-18cb3fa9591f\'\\n});\\n```\\n\\n  </TabItem>\\n\\n</Tabs>\\n\\n## Conclusion\\n\\nThe new feature of GO Feature Flag Relay Proxy 1.7.0 allows you to limit access to your relay proxy by configuring API Keys.\\n\\nThis adds an extra layer of security to your feature flag evaluations, ensuring that only known clients can access your relay proxy.\\n\\nThis feature is easy to configure and can be set up in a matter of minutes, giving you peace of mind knowing that your feature flags are secure."},{"id":"feature-flag-best-practice","metadata":{"permalink":"/blog/feature-flag-best-practice","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-03-29-best_practice/index.mdx","source":"@site/blog/2023-03-29-best_practice/index.mdx","title":"Feature Flag best practice","description":"Discover best practices for using feature flags in software development to improve agility and reduce risk.","date":"2023-03-29T00:00:00.000Z","formattedDate":"March 29, 2023","tags":[{"label":"feature flag","permalink":"/blog/tags/feature-flag"},{"label":"best practice","permalink":"/blog/tags/best-practice"}],"readingTime":2.925,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"Feature Flag best practice","description":"Discover best practices for using feature flags in software development to improve agility and reduce risk.","slug":"feature-flag-best-practice","authors":["thomaspoignant"],"tags":["feature flag","best practice"],"image":"http://gofeatureflag.org/assets/images/best-practice-59dcc6abbf70bbb5b96f80cca9ca7463.png"},"unlisted":false,"prevItem":{"title":"Limiting Access to the relay proxy with API Keys","permalink":"/blog/2023/04/12/relay_proxy_api_keys"},"nextItem":{"title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","permalink":"/blog/2023/03/17/multiple-config-file"}},"content":"import Link from \'@docusaurus/Link\';\\n\\n![Best Practice](best-practice.png)\\n\\nFeature flags are a powerful tool for software development, allowing for more flexible and adaptable development processes.\\n\\nHowever, to get the most out of feature flags, it\'s important to follow some best practices to ensure they are used effectively and efficiently.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## \ud83e\udd37 Keep flags simple and scoped\\nOne of the most important best practices for feature flags is to keep them **simple** and **scoped**.\\n\\nThis means avoiding overly complex flags that do too much, and instead using small, targeted flags that can be easily managed and maintained.\\nKeeping flags simple and scoped helps to avoid confusion and reduces the risk of bugs or other issues.\\n\\n## \u23f0 Avoid using flags as a long-term solution\\nAnother important best practice is to avoid using feature flags as a long-term solution.\\n\\nFeature flags should be used as a temporary measure to test new features or functionality, and then removed once the feature is fully tested and released.\\n\\nLeaving flags in place for too long can lead to code bloat and confusion, making it harder to maintain and update your codebase.\\n\\n## \ud83e\uddea Test and monitor flags\\nTesting and monitoring flags is essential to ensuring they are working as intended.\\n\\nThis means setting up a testing environment where you can test flags in a controlled environment, as well as monitoring\\nthe usage of flags in production to ensure they are not causing any issues.\\n\\nBy testing and monitoring flags, you can catch any issues early and avoid potential problems down the line.\\n\\n## \ud83c\udfaf Centralize your feature flags in a single location\\n\\nCentralize your feature flags in a single location, such as a feature flag management system _(GO Feature Flag is here to help you)_, to make it easier to\\nmanage and track them across different applications and environments.\\n\\nThis can help avoid conflicts and inconsistencies, improve collaboration among teams, and reduce the risk of introducing bugs or unintended consequences.\\n\\nIt also helps to use the same flag for multiple applications and to be able to act on a distributed systems.\\n\\n## \ud83d\udcdd Document flags and their purpose\\nDocumenting flags and their purpose is another best practice that can help to avoid confusion and ensure that everyone on the team is on the same page.\\n\\nThis means providing clear documentation for each flag, including its purpose, when it should be used, and any relevant notes or instructions.\\nThis can help to prevent misunderstandings and ensure that flags are used correctly.\\n\\n## \ud83d\udd28Use feature flags in combination with other tools\\nFinally, it\'s important to remember that feature flags are just one tool in your development toolbox.\\n\\nTo get the most out of feature flags, it\'s important to use them in combination with other tools, such as testing\\nframeworks, monitoring tools, CI/CD, and version control systems.\\n\\nBy using feature flags in combination with other tools, you can create a more comprehensive and effective development process.\\n\\n---\\n\\n# Conclusion\\nFollowing these best practices can help to ensure that your feature flags are used effectively and efficiently, allowing you to take full advantage of the benefits they offer.\\n\\nBy keeping flags simple and scoped, avoiding long-term use, testing and monitoring flags, documenting flags and their purpose, and using feature flags in combination with other tools, you can create a more flexible and adaptable development process that can help you to stay ahead of the competition.\\n\\n<center>\\n  <Link to={\'/docs\'} >\\n    <button className=\\"pushy__btn pushy__btn--md pushy__btn--black\\">\\n      Getting started with GO Feature Flag\\n    </button>\\n  </Link>\\n</center>"},{"id":"/2023/03/17/multiple-config-file","metadata":{"permalink":"/blog/2023/03/17/multiple-config-file","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-03-17-multiple-config-file/index.mdx","source":"@site/blog/2023-03-17-multiple-config-file/index.mdx","title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","description":"Are you tired of managing your feature flags with a single configuration flag?","date":"2023-03-17T00:00:00.000Z","formattedDate":"March 17, 2023","tags":[{"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"label":"Open Feature","permalink":"/blog/tags/open-feature"},{"label":"release","permalink":"/blog/tags/release"},{"label":"retrievers","permalink":"/blog/tags/retrievers"}],"readingTime":2.39,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","authors":["thomaspoignant"],"tags":["GO Feature Flag","Open Feature","release","retrievers"]},"unlisted":false,"prevItem":{"title":"Feature Flag best practice","permalink":"/blog/feature-flag-best-practice"},"nextItem":{"title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","permalink":"/blog/2023/02/20/lint-your-feature-flags"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n\\n__Are you tired of managing your feature flags with a single configuration flag?__\\n\\nWe\'ve got good news for you **GO feature flag** now supports multiple configuration flags! Plus, we\'ve added a new \\nfeature that allows all files to be loaded in parallel, making it faster and more efficient.\\n\\n![Retriever Flow](retriever-flow.png)\\n\\nManaging feature flags can be a challenging task, especially as your application grows and becomes more complex.\\nWith multiple configuration flags, you can easily manage different feature flag configurations for different apps, user groups, or any other criteria that you need.\\nYou can also use the same flags for multiple features, making it easier to maintain and update your code.\\n\\nIn addition to multiple configuration flags, we\'ve also ensured that all files are downloaded in parallel.\\nThis means that your feature flag configurations will be downloaded faster and more efficiently, improving the performance of your application.\\n\\n\x3c!-- truncate --\x3e\\n\\n## How to configure multiple flag configuration files\\nTo configure GO Feature Flag using multiple configuration flags files, simply create multiple files and store them in your favorite place.\\n\\nThen, use the field `retrievers` in your configuration to configure all the access to your configuration flags.\\n\\n<Tabs groupId=\\"code\\">\\n    <TabItem value=\\"relayproxy\\" label=\\"Relay Proxy Configuration\\">\\n\\n```yaml\\n# ...\\nretrievers:\\n  - kind: http\\n    url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/examples/retriever_file/flags.yaml\\n  - kind: file\\n    path: /local/flag-file.yaml   # Example of local path\\n  - kind: http   # you can have multiple time the same type of retriever\\n    url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/testdata/flag-config.yaml\\n\\n# Before we were using the field retriever that allows only one retriever at the time\\n# \\n# retriever:\\n#   kind: http\\n#   url: https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/examples/retriever_file/flags.yaml\\n\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"gomodule\\" label=\\"GO Module Configuration\\">\\n\\n```go\\nerr := ffclient.Init(ffclient.Config{\\n  // ...\\n  Retrievers: []retriever.Retriever{\\n    &fileretriever.Retriever{\\n      Path: \\"examples/retriever_multiple_config_files/flags.yaml\\",\\n    },\\n    &fileretriever.Retriever{\\n      Path: \\"examples/retriever_multiple_config_files/flags2.yaml\\",\\n    },\\n  },\\n  //...\\n\\n  // Before we were using the field retriever that allows only one retriever at the time\\n  //\\n  // Retriever: &fileretriever.Retriever{\\n  //     Path: \\"examples/retriever_multiple_config_files/flags.yaml\\",\\n  // },\\n})\\n```\\n\\n  </TabItem>\\n</Tabs>\\n\\n\\n## What happen if 2 files have the same flag?\\nWe are taking all the configuration files in the order of the `retrievers`. It means than the latest version of your flag will be the one from the latest file.\\n\\n:::tip example\\nWe have 3 files that contains the flag `my-flag` and there are in this order in the retriever list :\\n1. `flag-s3.yaml`\\n2. `flag-configmap.yaml`\\n3. `flag-github.yaml`\\n\\nThe flag configuration we will use to evaluate your flag will be the one that is in the file `flag-github.yaml`\\n:::\\n\\n\\n## Conclusion\\nWe believe that multiple configuration flags and parallel downloads will make it easier for you to manage your feature flags and provide more flexibility to your development process.\\nWe hope you find these features useful, and we look forward to hearing your feedback!\\n\\nIf you have any questions or comments, please don\'t hesitate to reach out to us. We\'re always happy to help!"},{"id":"/2023/02/20/lint-your-feature-flags","metadata":{"permalink":"/blog/2023/02/20/lint-your-feature-flags","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-02-20-lint-your-feature-flags/index.mdx","source":"@site/blog/2023-02-20-lint-your-feature-flags/index.mdx","title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","description":"As GO Feature Flag continues to evolve, we\'re excited to announce a new feature that will make it easier for our users to manage their feature flags.","date":"2023-02-20T00:00:00.000Z","formattedDate":"February 20, 2023","tags":[{"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"label":"linter","permalink":"/blog/tags/linter"},{"label":"lint","permalink":"/blog/tags/lint"}],"readingTime":3.285,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","authors":["thomaspoignant"],"tags":["GO Feature Flag","linter","lint"]},"unlisted":false,"prevItem":{"title":"Multiple Configuration Flags for GO Feature Flag \ud83d\uddc4\ufe0f","permalink":"/blog/2023/03/17/multiple-config-file"},"nextItem":{"title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","permalink":"/blog/2023/02/01/introducing-v1.0.0"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport styles from \'./styles.module.css\';\\n\\n\\nAs **GO Feature Flag** continues to evolve, we\'re excited to announce a new feature that will make it easier for our users to manage their feature flags.\\nWe are introducing the ability to **lint your feature flag configuration**, which will help ensure that your feature flag configurations are correct and **error-free**.\\n\\n![command line output](output.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducing `go-feature-flag-lint`\\nManaging feature flags can be challenging, especially when it comes to configuring them correctly.\\nWith our new command line [`go-feature-flag-lint`](/docs/tooling/linter), we are providing a tool that helps you avoid making mistakes in your feature flag configuration.\\n\\nTo use the feature flag configuration linting feature, simply run the command line, it will analyze your configuration to ensure that it is free of errors.\\nIf there are any issues, `go-feature-flag-lint` will provide you with a detailed report that identifies the problem to help you to fix it.\\n\\nTo get the maximum benefit from this feature, we recommend integrating it into your **CI/CD pipelines** to catch any issues before they make it to production.\\n\\nThe benefits of using our feature flag configuration linting feature, along with integrating it into your CI/CD pipelines, include:\\n\\n- Ensuring that your feature flag configuration is correct, which will reduce the risk of issues and errors in your application.\\n- Saving time and effort by automating the process of checking your feature flag configuration.\\n\\n## Configure your CI/CD pipelines\\n\\nIntegrating the feature flag configuration linting into your CI/CD pipeline is simple.\\nFirst, you will need to install the `go-feature-flag-lint` CLI tool, which can be used to run the linting process.\\nNext, you can add a new step to your pipeline that runs the `go-feature-flag-lint` CLI tool to lint your feature flag configuration file.\\n\\nIf there are any issues detected, the CLI tool will exit with a non-zero status code, which will cause your pipeline to fail.\\nBy integrating the feature flag configuration linting into your CI/CD pipeline, you can catch any issues with your feature flag configuration before it is deployed to production, reducing the risk of errors and issues.\\n\\nHere\'s some examples of how to integrate the feature flag configuration linting into a CI/CD pipeline for popular CI/CD services:\\n\\n<Tabs groupId=\\"code\\">\\n    <TabItem value=\\"githubaction\\" label=\\"Github Action\\" attributes={{className: styles.github}}>\\n\\n```yaml\\nname: \\"Build\\"\\non:\\n  push:\\n    branches:\\n      - main\\n  pull_request:\\n    types: [ opened, synchronize, reopened ]\\n\\njobs:\\n  Lint:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Checkout repository\\n        uses: actions/checkout@v3\\n\\n      - name: Download go-feature-flag-lint\\n        run: curl -L $(curl -s https://api.github.com/repos/thomaspoignant/go-feature-flag/releases/latest | jq -r \'.assets[] | select(.name|match(\\"Linux_x86_64.tar.gz$\\")) | .browser_download_url\' | grep \'go-feature-flag-lint\') --output release.tar.gz && tar -zxvf release.tar.gz\\n\\n      - name: Run go-feature-flag-lint\\n        run: ./go-feature-flag-lint --input-format=yaml --input-file=flag-config.yaml # please put the right file name\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"circleci\\" label=\\"CircleCi\\" attributes={{className: styles.circleci}}>\\n\\n```yaml\\nversion: 2.1\\njobs:\\n  build:\\n    docker:\\n     - image: cimg/base:2022.05\\n\\n    steps:\\n      - checkout\\n      - run: curl -L $(curl -s https://api.github.com/repos/thomaspoignant/go-feature-flag/releases/latest | jq -r \'.assets[] | select(.name|match(\\"Linux_x86_64.tar.gz$\\")) | .browser_download_url\' | grep \'go-feature-flag-lint\') --output release.tar.gz && tar -zxvf release.tar.gz\\n      - run: ./go-feature-flag-lint --input-format=yaml --input-file=flag-config.yaml # please put the right file name\\n```\\n\\n  </TabItem>\\n    <TabItem value=\\"gitlab\\" label=\\"Gitlab\\" attributes={{className: styles.gitlab}}>\\n\\n```yaml\\nimage: ubuntu\\nlint-job:\\n  stage: build\\n\\n  before_script:\\n    - apt-get -qq update\\n    - apt-get install -y jq curl\\n\\n  script:\\n    - curl -L $(curl -s https://api.github.com/repos/thomaspoignant/go-feature-flag/releases/latest | jq -r \'.assets[] | select(.name|match(\\"Linux_x86_64.tar.gz$\\")) | .browser_download_url\' | grep \'go-feature-flag-lint\') --output release.tar.gz && tar -zxvf release.tar.gz\\n    - ./go-feature-flag-lint --input-format=yaml --input-file=flag-config.yaml # please put the right file name\\n```\\n\\n  </TabItem>\\n\\n</Tabs>\\n\\n\\n## Conclusion\\n\\nWe are thrilled to be introducing this new feature, which we believe will make a significant difference in how our users manage their feature flags. With the introduction of feature flag configuration linting, we are providing a tool that will make it easier for you to manage your feature flags and get the most out of GO Feature Flag.\\n\\nIf you have any questions about this feature or would like more information, please don\'t hesitate to get in touch with our support team. We\'re always here to help!"},{"id":"/2023/02/01/introducing-v1.0.0","metadata":{"permalink":"/blog/2023/02/01/introducing-v1.0.0","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2023-02-01-introducing-v1.0.0/index.md","source":"@site/blog/2023-02-01-introducing-v1.0.0/index.md","title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","description":"GO Feature Flag logo","date":"2023-02-01T00:00:00.000Z","formattedDate":"February 1, 2023","tags":[{"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"label":"Open Feature","permalink":"/blog/tags/open-feature"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":4.895,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","authors":["thomaspoignant"],"tags":["GO Feature Flag","Open Feature","release"]},"unlisted":false,"prevItem":{"title":"Lint your feature flag config in you CI/CD pipelines \u274c \u2705","permalink":"/blog/2023/02/20/lint-your-feature-flags"},"nextItem":{"title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","permalink":"/blog/2022/07/01/feature-flags-devobs-podcast"}},"content":"![GO Feature Flag logo](banner.png)\\n\\n# \ud83d\ude80 Announcing GO Feature Flag v1.0.0, get more from your feature flags\\n\\nWe are so happy to finally announce that **GO Feature Flag** v1.0.0 is released. \ud83c\udf89 \ud83e\udd73 \ud83d\ude80\\n\\nIt was a long journey before this release but we are happy to propose you an even better experience with feature flags always keeping simplicity in mind and building a lightweight solution.\\n\\nOur goal is still the same, we want you to experience the world of feature flags with a lightweight self-hosted solution.\\n\\nWith this new version you will now be able to enhance your usage of feature flagging with opening the creation of more complex and more advance toggles.\\n\x3c!-- truncate --\x3e\\n\\n# What is changing?\\n\\n## Flag configuration format\\n\\nThe main change is the format of your flags configuration. \\n\\nAfter using the version `v0.x.x` for quite some time we notice some limitation on the way our flag configuration was designed.\\nIt was hard to return more than 2 different values with the same flag and we wanted to find a better way to represent our flags to be more extensible.\\n\\nThe new representation of the flag is a bit more verbose but allows a lot more possibility in the long term, being able to create more advanced flag.\\n\\n**Old format:**\\n\\nIn the previous versions the flag representation was looking like this:\\n\\n```yaml\\ntest-flag:\\n  rule: key eq \\"random-key\\"\\n  percentage: 40\\n  true: true\\n  false: false\\n  default: false\\n```\\n\\nAs you can see on this example you can only have a value for the `true` variation and for the `false` variation, the `default`variation was applying if the user was not part of the `rule`.\\n\\n**New format:**\\n\\nThe same flag in the new format will looks like this:\\n\\n```yaml\\ntest-flag:\\n  variations:\\n    variation_A: true\\n    variation_B: false\\n  targeting:\\n    - query: key eq \\"random-key\\"\\n      percentage:\\n        variation_B: 60\\n        variation_A: 40\\n  defaultRule:\\n    variation: variation_B\\n```\\n\\nWith the new format you have an unlimited number of variation possible you can define but also more than one rule for a specific flag.\\n\\nIt allows to target different types of users with different values for the same feature flag.\\n\\nLet\u2019s take a real life example, we want to get the background color for our website based on this criterias:\\n\\n- `pro` users should have a red background\\n- `enterprise` users should have a green background\\n- **40%** of the `free` users should have a **grey** background and **60%** a **yellow** background\\n- **other types** of user have a white background\\n\\nWe can come-up with a flag, the configuration will look like this:\\n\\n```yaml\\nuser-background-color:\\n  variations:\\n    pro: #ff1f00\\n    enterprise: #114f03\\n    free_grey: #b0b3af\\n    free_yellow: #ecec0a\\n    default: #ffffff\\n  targeting:\\n    - query: type eq \\"pro\\"\\n      variation: pro\\n    - query: type eq \\"enterprise\\"\\n      variation: enterprise\\n    - query: type eq \\"free\\"\\n      percentage:\\n        free_grey: 40\\n        free_yellow: 60\\n  defaultRule:\\n    variation: default\\n```\\n\\nAs you can see we can have a way more advanced flag configuration with this new format. This format is solving all the limitation we had with the version `v0.x.x` of **GO Feature Flag**.\\n\\n### Migrate from v0.x.x to v1.x.x\\n\\nFirst of all you should know that all flags from the version `v0.x.x` are still compatible with this new version of **GO Feature Flag**. We made it possible to reduce the disagreement to have to convert all your flag directly.\\n\\n**BUT** we encourage you to migrate your flag to the new version and for this we have created a tool called `go-feature-flag-migration-cli` to convert flags in `v0.x.x` format to `v1.0.0` format.\\n\\nThe easiest way to use it is probably to use our docker image like this:\\n\\n```bash\\ndocker run \\\\\\n  -v $(pwd)/your/configuration_folder:/config \\\\\\n  thomaspoignant/go-feature-flag-migration-cli:latest \\\\\\n  --input-format=yaml \\\\\\n  --input-file=/config/my-go-feature-flag-config-v0.x.x.yaml \\\\\\n  --output-format=yaml \\\\\\n  --output-file=/config/my-go-feature-flag-config-v1.x.x.yaml\\n```\\n\\n## Documentation\\n\\nWe use the opportunity of the `v1.0.0` to revamp our documentation and to highlight how you can use **GO Feature Flag** in 2 different modes.\\n\\n- **The GO module**, this is where we started and this is the core of what we propose. In the documentation you will find all the information on how to use the module into your GO project.\\n- Using **Open-Feature**, the new open-source vendor agnostic standard for feature flags. You can use the `relay-proxy` our server component that allows to use **GO Feature Flag** with multiple languages *(for now we support `javascript`, `typescript`, `java`, `GO` and `.Net`)*. In the documentation you will find how to use the **GO Feature Flag providers** in combination with the **Open Feature SDKs**.\\n\\n## Flag Editor\\n\\nOur old flag editor was not compatible anymore with the new `v1.0.0` flag format. \\n\\nSo we decided to restart our flag editor from scratch and to allow the possibility to create flags configuration from a simple UI. \\n\\n![Kapture 2023-01-20 at 16.16.50.gif](flag_editor.gif)\\n\\nFor now it is a tiny UI that make your life easier, but the goal is to evolve it more and more to be the place where you want to go to build your new feature flags.\\n\\n# What has not changed?\\n\\nYes a lot of things have changed but our internals are solids and we have ensure to be consistent with the previous versions.\\n\\nOur main points of attention where the following:\\n\\n- User segmentation is similar between `v0.x.x` and `v1.0.0` meaning that if a user was affected by a flag (in a percentage for example) he will continue to be in the same cohort.\\n- All `retrievers` and data `exporters` have not changed and are still working exactly the same way as before.\\n- You can continue using **GO Feature Flags** with your old flags.\\n- Moving to the version `v1.0.0` is transparent and you just have to change the version.\\n- You can still use our advance rollout capabilities such as **experimentation**, **scheduled rollout**, **progressive rollout \u2026**\\n\\n# Feedback\\n\\nFeedbacks is our only way to evolve GO Feature Flag, so please contact us to give us any feedback.\\n\\n- Via [email](mailto:contact@gofeaturegflag.org)\\n- Via a [GitHub Issue](https://github.com/thomaspoignant/go-feature-flag/issues/new/choose)"},{"id":"/2022/07/01/feature-flags-devobs-podcast","metadata":{"permalink":"/blog/2022/07/01/feature-flags-devobs-podcast","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2022-07-01-feature-flags-devobs-podcast/index.md","source":"@site/blog/2022-07-01-feature-flags-devobs-podcast/index.md","title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","description":"Earlier this week the super cool podcast Dev\u2019Obs asked me to talk about feature flags, go-feature-flag and also the super nice initiative OpenFeature.","date":"2022-07-01T00:00:00.000Z","formattedDate":"July 1, 2022","tags":[{"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"label":"Openfeature","permalink":"/blog/tags/openfeature"},{"label":"Podcast","permalink":"/blog/tags/podcast"}],"readingTime":0.35,"hasTruncateMarker":false,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","authors":["thomaspoignant"],"tags":["GO Feature Flag","Openfeature","Podcast"]},"unlisted":false,"prevItem":{"title":"\ud83d\ude80 Announcing GO Feature Flag v1.0.0","permalink":"/blog/2023/02/01/introducing-v1.0.0"},"nextItem":{"title":"Automate Your Product Release Cycles Using Go Feature Flag","permalink":"/blog/automate-your-product-release-cycles-using-go-feature-flag"}},"content":"![](./devobs.jpg)\\n\\nEarlier this week the super cool podcast Dev\u2019Obs asked me to talk about feature flags, go-feature-flag and also the super nice initiative OpenFeature.\\n\\nThe podcast is in French \ud83c\uddeb\ud83c\uddf7 (yes I know sorry\u2026) but you can learn a lot of cool things, when to use them, what is OpenFeature about and all the cool things that the feature flags can bring to your developer experience.\\n\\nListen it here: https://www.listennotes.com/podcasts/devobs/devobs-24-feature-flags-rknRoFGL7N5/"},{"id":"automate-your-product-release-cycles-using-go-feature-flag","metadata":{"permalink":"/blog/automate-your-product-release-cycles-using-go-feature-flag","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2021-05-26-Automate-Your-Product-Release-Cycles-Using-Go-Feature-Flag/index.md","source":"@site/blog/2021-05-26-Automate-Your-Product-Release-Cycles-Using-Go-Feature-Flag/index.md","title":"Automate Your Product Release Cycles Using Go Feature Flag","description":"When you build a new feature, orchestrating the actual launch schedule between the Product, Engineering, and Marketing teams can be challenging.","date":"2021-05-26T00:00:00.000Z","formattedDate":"May 26, 2021","tags":[{"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"label":"v0.x.x","permalink":"/blog/tags/v-0-x-x"}],"readingTime":4.42,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"slug":"automate-your-product-release-cycles-using-go-feature-flag","title":"Automate Your Product Release Cycles Using Go Feature Flag","authors":["thomaspoignant"],"tags":["GO Feature Flag","v0.x.x"]},"unlisted":false,"prevItem":{"title":"\ud83d\udd0a Feature Flags in Dev\u2019Obs Podcast \ud83c\uddeb\ud83c\uddf7","permalink":"/blog/2022/07/01/feature-flags-devobs-podcast"},"nextItem":{"title":"Introduction blog post","permalink":"/blog/introduction-blog-post"}},"content":"![](./head.jpg)\\n\\nWhen you build a new feature, orchestrating the actual launch schedule between the Product, Engineering, and Marketing teams can be challenging.\\n\\nWhile it seems easy to launch something new, a poorly executed rollout can end up being your worst nightmare.\\n\\nIn this article, I will present to you how to use the Go module go-feature-flag to roll out your new features smoothly and help you be confident during the rollout phase. If you are not familiar with the concept of feature flags or feature toggles, I encourage you to read this [article by Martin Fowler](https://www.martinfowler.com/articles/feature-toggles.html).\\n\\ngo-feature-flag is a Go module to easily manage your flags. You can refer to this article I wrote a few months ago to understand how it works.\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## How To Use go-feature-flag\\n\\nThe library is super simple to use:\\n\\n1. Install the module:\\n```go\\ngo get github.com/thomaspoignant/go-feature-flag\\n```\\n\\n2. Init the client with the location of your configuration file for your flags:\\n\\n```go\\nerr := ffclient.Init(ffclient.Config{\\n    PollInterval: 60,\\n    Retriever: &ffclient.HTTPRetriever{\\n        URL:    \\"http://example.com/flag-config.yaml\\",\\n    },\\n})\\ndefer ffclient.Close()\\n```\\n\\n3. Put your new features conditionally based on the flag value:\\n\\n```go\\nuser := ffcontext.NewEvaluationContext(\\"user-unique-key\\")\\nhasFlag, _ := ffclient.BoolVariation(\\"test-flag\\", user, false)\\nif hasFlag {\\n    // flag \\"test-flag\\" is true for the user\\n} else {\\n    // flag \\"test-flag\\" is false for the user\\n}\\n```\\n\\nYou can have way more configuration, but I\u2019ll let you check the [documentation](https://thomaspoignant.github.io/go-feature-flag/) for that.\\n\\n---\\n\\n## Progressive Rollout\\n\\nWhen you release a new feature that can have a strong impact on your system, you probably don\u2019t want to go all-in with this new feature for all your users.\\n\\nFor example, you are deploying something that can be CPU-consuming and you want to have time to check if your servers handle it correctly. This is typically a great use case for a progressive rollout.\\n\\nIt progressively increases how many users are impacted by your feature flag to avoid a big-bang rollout for all your users at once. During that time, it allows you to monitor your system and be confident that your infrastructure can handle this new load.\\n\\n```yaml\\nprogressive-flag:\\n  true: true\\n  false: false\\n  default: false\\n  rollout:\\n    progressive:\\n      percentage:\\n        initial: 0\\n        end: 100\\n      releaseRamp:\\n        start: 2021-03-20T00:00:00.10-05:00\\n        end: 2021-03-21T00:00:00.10-05:00\\n```\\n\\nTo do that in go-feature-flag, you will configure your flag like in the example above. You set up a progressive rollout with an initial percentage value and a release ramp. Over time, more and more users can be affected by the flag and will have the new feature.\\n\\nDepending on how critical this feature is, you can have a long or a short release ramp. If something goes wrong, you can edit your flag to stop the rollout at any time.\\n\\n---\\n\\n## Scheduling Workflows\\n\\nScheduling introduces the ability for users to change their flags for future points in time. While this sounds deceptively straightforward, it unlocks the potential for users to create complex release strategies by scheduling the incremental steps in advance.\\n\\nFor example, you may want to turn a feature on for internal testing tomorrow and then enable it for your \u201cbeta\u201d user segment four days later.\\n\\n```yaml\\nscheduled-flag:\\n  true: true\\n  false: false\\n  default: false\\n  percentage: 0\\n  rollout:\\n    scheduled:\\n      steps:\\n        - date: 2020-04-10T00:00:00.00+02:00\\n          rule: internal eq true\\n          percentage: 100        - date: 2020-04-14T00:00:00.00+02:00\\n          rule: internal eq true and beta eq true        - date: 2020-04-18T00:00:00.00+02:00\\n          rule: \\"\\"\\n```\\n\\nIn this example, you can see that we are updating the flag multiple times to perform actions in the future. Let\u2019s detail what will happen in this configuration:\\n\\n1. Before `2020\u201304\u201310`, the flag is not served.\\n2. After the first update of the flag (`2020\u201304\u201310`), we have 100% of the internal users who received the flag as true.\\n3. Four days later, we add the users who have a `bet`a flag as `true`.\\n4. Finally, four days later, we open the feature to all users.\\n\\nAs you can see, this is really powerful because your release management is now ready without doing any manual deployment/action, and this scheduling can be done by a non-technical user (aka your product manager).\\n\\n---\\n\\n## Experimentation Rollout\\n\\nSometimes you also want to experiment, collect the data, and decide later if you want to roll out the feature to all your users.\\n\\nTo do that correctly, you can configure your flag with a start date and an end date for a subset of your users.\\n\\n```yaml\\nexperimentation-flag:\\n  percentage: 50\\n  true: true\\n  false: false\\n  default: false\\n  rule: userId sw \\"9\\"\\n  rollout:\\n    experimentation:\\n      start: 2021-03-20T00:00:00.10-05:00\\n      end: 2021-03-21T00:00:00.10-05:00\\n```\\n\\nIn this example, 50% of your users with a userId that starts with 9 will be impacted by the flag between the start and the end dates of the experimentation.\\n\\nWith the module, you can also collect the data of your variation (see the [documentation](https://thomaspoignant.github.io/go-feature-flag/data_collection/) for more info) to join them with the data of what you are testing.\\n\\nSo you can see the results of your experimentation and decide whether you want to roll out this flag for real or not.\\n\\n---\\n\\n## Conclusion\\n\\nUsing feature flags really is a great thing, but it becomes even better if you use some advanced rollout strategies.\\n\\nIf you start using them, you will love it because you decouple the deployment and the release and you can have fine-grained control over what your users can do."},{"id":"introduction-blog-post","metadata":{"permalink":"/blog/introduction-blog-post","editUrl":"https://github.com/thomaspoignant/go-feature-flag/tree/main/website/blog/2021-01-11-introduction-blog-post/index.md","source":"@site/blog/2021-01-11-introduction-blog-post/index.md","title":"Introduction blog post","description":"I absolutely don\u2019t think human/manual QA gates should be involved in between the writing of code and its being live. To avoid breaking things every time and to have an early cutoff system, you should use feature flags.","date":"2021-01-11T00:00:00.000Z","formattedDate":"January 11, 2021","tags":[{"label":"GO Feature Flag","permalink":"/blog/tags/go-feature-flag"},{"label":"v0.x.x","permalink":"/blog/tags/v-0-x-x"}],"readingTime":4.035,"hasTruncateMarker":true,"authors":[{"name":"Thomas Poignant","title":"Creator of GO Feature Flag","url":"https://github.com/thomaspoignant","imageURL":"https://github.com/thomaspoignant.png","key":"thomaspoignant"}],"frontMatter":{"slug":"introduction-blog-post","title":"Introduction blog post","authors":["thomaspoignant"],"tags":["GO Feature Flag","v0.x.x"]},"unlisted":false,"prevItem":{"title":"Automate Your Product Release Cycles Using Go Feature Flag","permalink":"/blog/automate-your-product-release-cycles-using-go-feature-flag"}},"content":"<center>\\n\\n  ![](./logo.png)\\n  \\n</center>\\n\\nI absolutely don\u2019t think human/manual QA gates should be involved in between the writing of code and its being live. To avoid breaking things every time and to have an early cutoff system, you should use feature flags.\\n\\nThere are a lot of systems available on the market to manage your flags, like [LaunchDarkly](https://launchdarkly.com/) or [UNLEASH](https://unleash.org/), that have Golang support \u2014 but this option is expensive, and you have to host a server somewhere to manage your flags.\\n\\nFrom this starting point, I came up with the idea to create a simple library with only one file in the back end. This file can be stored in different places (AWS S3, GitHub, an HTTP endpoint somewhere, etc.). This is the only thing you have to host \u2014 all the decision logic stands inside the Go module.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n## Why a new solution?\\n\\nThere are some solutions available for Go to manage feature flags. I can classify them into two categories:\\n\\n- You need to run a specific service: [markphelps/flipt](https://github.com/markphelps/flipt), [checkr/flagr](https://github.com/checkr/flagr), [Unleash/unleash](https://github.com/Unleash/unleash), [vsco/dcdr](https://github.com/vsco/dcdr), etc.\\n- You need to have a database: [xchapter7x/toggle](https://github.com/xchapter7x/toggle), [AntoineAugusti/feature-flags](https://github.com/AntoineAugusti/feature-flags), etc.\\n\\nAll of these solutions are great and have a lot of features, but I was a bit worried about having a full setup with things to install before doing feature flags on a basic service.\\n\\nI don\u2019t want to host/maintain/monitor a full feature-flag system if my needs are really small.\\n\\nSo I decided to make go-feature-flag, a simple and easy-to-implement feature-flag system, with no back end at all except a shared configuration file you can store anywhere (S3, GitHub, HTTP endpoint, etc.).\\n\\nThe goal is to experience the usage of feature flags without a complex solution, and if you end up liking it and need a more advanced pattern, you can go to any open-source solution or SaaS solution \u2014 like LaunchDarkly, for example.\\n\\n--- \\n\\n## How Does It Work?\\n\\nHow this Go module works is easy. It just reads the shared file every x seconds and gives you a way to get the value of your flag in the type you expect.\\n\\n![](./sdk-explanation.jpg)\\n\\nAs you can see, what go-feature-flag is providing is a way for you to keep in sync with the feature-flag config file. It also allows you to evaluate the flag for your users.\\n\\nA rule system based on [nikunjy/rules](https://github.com/nikunjy/rules) allows you to specify complex rules to apply the flag only for a subset of your users.\\n\\nThe percentage allows you to select which percentage of users will get the true value, but I\u2019m sure you wonder how the repartition is done. It\u2019s really easy \u2014 we\u2019re doing a hash of the key of the user with the flag name used as a salt (it guarantees that the repartition isn\u2019t always to the same users).\\n\\n![](./code.png)\\n\\n---\\n\\n## How to Use It\\n\\nThe main goal of go-feature-flag is to be super simple so you don\u2019t have much to do in order to use it.\\n\\n- The first thing to do is host your config file somewhere (S3, GitHub, etc.)\\n- During app initialization, init go-feature-flag with a configuration:\\n\\n```go\\nerr := ffclient.Init(ffclient.Config{\\n    PollInterval: 3,\\n    Retriever: &ffClient.HTTPRetriever{\\n        URL:    \\"https://raw.githubusercontent.com/thomaspoignant/go-feature-flag/main/testdata/test.yaml\\",\\n    },\\n})\\ndefer ffclient.Close()\\n```\\n\\n- Now that you\u2019ve done an init on go-feature-flag, you can see the value of the flag for your users, with something like this:\\n\\n```go\\nuser := ffcontext.NewEvaluationContext(\\"user-unique-key\\")\\nhasFlag, _ := ffclient.BoolVariation(\\"test-flag\\", user, false)\\nif hasFlag {\\n    // flag \\"test-flag\\" is true for the user\\n} else {\\n    // flag \\"test-flag\\" is false for the user\\n}\\n```\\n\\n**Note**: Your variation will return the default value (the last parameter) if you have an error (flag not present, wrong type, etc.).\\n\\n- It\u2019s a basic example, but you can put as many properties as you want for your User to make complex queries on your flag\\n\\n```go\\nuser = ffcontext.NewEvaluationContextBuilder(\\"user-unique-key\\").\\n AddCustom(\\"firstname\\", \\"John\\").\\n AddCustom(\\"lastname\\", \\"Doe\\").\\n AddCustom(\\"email\\", \\"john.doe@example.com\\").\\n Build()\\n```\\n\\nThis allows you to have a rule like `email eq \\"john.doe@example.com\\"` to select a specific user with your flag.\\n\\n--- \\n\\n## What\u2019s Next?\\nAs you can see go-feature-flag is simple, and the goal is to keep it as simple as possible. But this doesn\u2019t mean it\u2019s finished.\\n\\nFor now, I see an evolutionary path for go-feature-flag: First, it should be able to store the flag config file anywhere, so we have to support more retrievers. The second thing is to get more feedback. For now, we\u2019re logging some stuff, but maybe some users would like to have a webhook or Slack notification.\\n\\ngo-feature-flag is also open to contribution, so if you want to contribute any ideas or help, I\u2019d really love to hear from you concerning what you think about this library and what you want in it.\\n\\nSo feel free to write [a discussion](https://github.com/thomaspoignant/go-feature-flag/discussions) on GitHub, open an [issue](https://github.com/thomaspoignant/go-feature-flag/issues), or send me an [email](mailto:contact@gofeatureflag.org)."}]}')}}]);